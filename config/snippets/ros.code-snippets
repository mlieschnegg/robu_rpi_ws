{
    "ROS2: Node-Klasse mit main()-Block und Fehlerbehandlung": {
        "prefix": "ros2_main_class",
        "body": [
        "from rclpy.node import Node",
        "import rclpy",
        "",
        "class ${1:MyNodeClass}(Node):",
        "    def __init__(self, node_name: str):",
        "        super().__init__(node_name)",
        "",
        "    def destroy_node(self):",
        "        return super().destroy_node()",
        "",
        "def main():",
        "    node = None",
        "    try:",
        "        rclpy.init()",
        "        try:",
        "            node = ${1:MyNodeClass}(\"${2:node_name}\")",
        "        except Exception as e:",
        "            print(f\"Fehler beim Erstellen des Nodes: {e}\")",
        "            return",
        "",
        "        rclpy.spin(node)",
        "",
        "    except KeyboardInterrupt:",
        "        print(\"Sie haben STRG+C gedr√ºckt!\")",
        "",
        "    finally:",
        "        if node is not None:",
        "            if rclpy.ok():",
        "                node.get_logger().info(f\"Node {node.get_name()} wird beendet!\")",
        "            node.destroy_node()",
        "        if rclpy.ok():",
        "            rclpy.shutdown()",
        "",
        "if __name__ == \"__main__\":",
        "    main()"
        ],
        "description": "ROS2 Node-Klasse mit einem main()-Block, Fehlerbehandlung und sicherem Shutdown"
    },

    "ROS2 Node Import Template":{
        "prefix": "nit",
        "body": [
            "import rclpy",
            "from rclpy.node import Node",
            "from std_msgs.msg import String, Float32",
            "from sensor_msgs.msg import Image",
            "from geometry_msgs.msg import Twist",
        ],
        "description": "ROS2 Template f√ºr Imports bei Nodes"

    },

    // üß© Beispiel f√ºr eine Launch-Datei mit einem Node
    "ROS2 Launch File Template":{
        "prefix": "ros_launch_file_node",
        "body":["from launch import LaunchDescription",
                "from launch_ros.actions import Node",
                "from launch.actions import DeclareLaunchArgument",
                "from launch.substitutions import LaunchConfiguration",
                "",
                "def generate_launch_description():",
                "    node = Node(",
                "        package='${1:package_name}',",
                "        executable='${2:executable_name}',",
                "        name='${3:node_name}',",
                "        output='screen',",
                "        parameters=[]",
                "    )",
                "",
                "    ld = LaunchDescription()",
                "    ld.add_action(node)",
                "    return ld",
        ],
        "description": "RO2 Template f√ºr eine Python-Launch-Datei"
    },

            
    // üîÄ Launch-Datei mit Argumenten (komplettes Beispiel)
    "ROS2 Launch: Komplette Datei mit Argument": {
        "prefix": "ros_launch_file_node_arg",
        "body": [
        "from launch import LaunchDescription",
        "from launch.actions import DeclareLaunchArgument",
        "from launch.substitutions import LaunchConfiguration",
        "from launch_ros.actions import Node",
        "",
        "def generate_launch_description():",
        "    return LaunchDescription([",
        "        DeclareLaunchArgument(",
        "            'robot_name',",
        "            default_value='robby',",
        "            description='Name des Roboters'",
        "        ),",
        "",
        "        Node(",
        "            package='mein_paket',",
        "            executable='mein_knoten',",
        "            name=LaunchConfiguration('robot_name'),",
        "            parameters=[{",
        "                'robot_name': LaunchConfiguration('robot_name')",
        "            }],",
        "            output='screen'",
        "        )",
        "    ])"
        ],
        "description": "ROS2 Launch-Datei mit Launch-Argumenten"
    },

    // üì¶ Basis-Importe f√ºr ROS2-Launch-Dateien
    "ROS2 Launch: Import Statements": {
        "prefix": "ros_launch_imports",
        "body": [
        "from launch import LaunchDescription",
        "from launch.actions import DeclareLaunchArgument",
        "from launch.substitutions import LaunchConfiguration",
        "from launch_ros.actions import Node"
        ],
        "description": "Importe f√ºr ROS2-Launch-Dateien"
    },
    
    // üß± Deklariert ein einzelnes Launch-Argument
    "ROS2 Launch: Declare Argument": {
        "prefix": "ros_launch_arg",
        "body": [
        "DeclareLaunchArgument(",
        "    '${1:arg_name}',",
        "    default_value='${2:default}',",
        "    description='${3:Beschreibung}'",
        ")"
        ],
        "description": "Deklariert ein Launch-Argument"
    },
    
    // üîß Zugriff auf LaunchConfiguration Variable
    "ROS2 Launch: LaunchConfiguration Variable": {
        "prefix": "ros_launch_config",
        "body": [
        "LaunchConfiguration('${1:arg_name}')"
        ],
        "description": "Zugriff auf ein Launch-Argument via LaunchConfiguration"
    },
    
    // üß© Parameter √ºber LaunchConfiguration setzen
    "ROS2 Launch: Parameter via LaunchConfiguration": {
        "prefix": "ros_param_from_arg",
        "body": [
            "${1:param_name} = LaunchConfiguration('${2:arg_name}')"
        ],
        "description": "Ein Parameter, der √ºber ein Launch-Argument gesetzt wird"
    },
    
    // üß± Einfache Node-Deklaration
    "ROS2 Launch: Node": {
        "prefix": "ros_launch_node",
        "body": [
        "Node(",
        "    package='${1:mein_paket}',",
        "    executable='${2:mein_knoten}',",
        "    name='${3:knoten_name}',",
        "    output='screen'",
        ")"
        ],
        "description": "ROS2 Node mit Name und Executable"
    },
    
    // ‚öôÔ∏è Node mit Parametern
    "ROS2 Launch: Node mit Parametern": {
        "prefix": "ros_launch_node_param",
        "body": [
        "Node(",
        "    package='${1:mein_paket}',",
        "    executable='${2:mein_knoten}',",
        "    name='${3:knoten_name}',",
        "    parameters=[{",
        "        '${4:param_name}': ${5:Wert}",
        "    }],",
        "    output='screen'",
        ")"
        ],
        "description": "ROS2 Node mit Parametern"
    },
    
    // üß∞ Kombiniert Argument + Node + LaunchConfiguration
    "ROS2 Launch: Argument + Node": {
        "prefix": "ros_launch_node_arg",
        "body": [
        "DeclareLaunchArgument(",
        "    '${1:arg_name}',",
        "    default_value='${2:default}',",
        "    description='${3:Beschreibung}'",
        "),",
        "",
        "Node(",
        "    package='${4:mein_paket}',",
        "    executable='${5:mein_knoten}',",
        "    name=LaunchConfiguration('${1}'),",
        "    parameters=[{",
        "        '${1}': LaunchConfiguration('${1}')",
        "    }],",
        "    output='screen'",
        ")"
        ],
        "description": "Deklariert ein Launch-Argument und verwendet es direkt im Node"
    },     
      
}
