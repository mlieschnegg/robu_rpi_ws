{
    "ROS2: Node-Klasse mit main()-Block und Fehlerbehandlung": {
        "prefix": "ros_main_class",
        "body": [
        "from rclpy.node import Node",
        "import rclpy",
        "",
        "class ${1:MyNodeClass}(Node):",
        "    def __init__(self, node_name: str):",
        "        super().__init__(node_name)",
        "",
        "    def destroy_node(self):",
        "        return super().destroy_node()",
        "",
        "def main():",
        "    node = None",
        "    try:",
        "        rclpy.init()",
        "        try:",
        "            node = ${1:MyNodeClass}(\"${2:node_name}\")",
        "        except Exception as e:",
        "            print(f\"Fehler beim Erstellen des Nodes: {e}\")",
        "            return",
        "",
        "        rclpy.spin(node)",
        "",
        "    except KeyboardInterrupt:",
        "        print(\"Sie haben STRG+C gedr√ºckt!\")",
        "",
        "    finally:",
        "        if node is not None:",
        "            if rclpy.ok():",
        "                node.get_logger().info(f\"Node {node.get_name()} wird beendet!\")",
        "            node.destroy_node()",
        "        if rclpy.ok():",
        "            rclpy.shutdown()",
        "",
        "if __name__ == \"__main__\":",
        "    main()"
        ],
        "description": "ROS2 Node-Klasse mit einem main()-Block, Fehlerbehandlung und sicherem Shutdown"
    },

    "ROS2 Node Import Template":{
        "prefix": "ros_node_import",
        "body": [
            "import rclpy",
            "from rclpy.node import Node",
            "from std_msgs.msg import String, Float32",
            "from sensor_msgs.msg import Image",
            "from geometry_msgs.msg import Twist",
        ],
        "description": "ROS2 Template f√ºr Imports bei Nodes"

    },

    "ROS2 Publisher Template": {
        "prefix": "ros_pub",
        "body": [
        "self._pub_${1:arg_name} = self.create_publisher(${2:arg_msg_type}, '/${1:arg_name}', 10)"
        ],
        "description": "ROS2 Publisher mit _pub Prefix und Topic = /arg_name"
    },


    "ROS2 Subscriber Template": {
        "prefix": "ros_sub",
        "body": [
        "self._sub_${1:arg_name} = self.create_subscription(",
        "    ${2:arg_msg_type},",
        "    '/${1:arg_name}',",
        "    self._sub_${1:arg_name}_cb,",
        "    10",
        ")"
        ],
        "description": "ROS2 Subscriber mit _sub Prefix, Topic = /arg_name und Callback"
    },

           
    // üîÄ Launch-Datei mit Argumenten (komplettes Beispiel)
    "ROS2 Launch Dummy": {
        "prefix": "ros_launch_file",
        "body": [
            "from launch import LaunchDescription",
            "from launch.actions import DeclareLaunchArgument",
            "from launch.substitutions import LaunchConfiguration",
            "from launch_ros.actions import Node",
            "from ament_index_python.packages import get_package_share_directory",
            "",
            "def generate_launch_description():",
            "    arg_value = DeclareLaunchArgument('dummy_arg', default_value='42', description='Dummy Argument')",
            "",
            "    node = Node(",
            "        package='demo_pkg',",
            "        executable='demo_node',",
            "        name='demo_node',",
            "        parameters=[{",
            "            'dummy_param': LaunchConfiguration('dummy_arg')",
            "        }]",
            "    )",
            "",
            "    ld = LaunchDescription()",
            "    ld.add_action(arg_value)",
            "    ld.add_action(node)",
            "    return ld"
        ],
        "description": "Minimaler ROS2 Launch mit einem Argument und einem Node"
    },

    // üì¶ Basis-Importe f√ºr ROS2-Launch-Dateien
    "ROS2 Launch: Import Statements": {
        "prefix": "ros_launch_file_empty",
        "body": [
            "from launch import LaunchDescription",
            "from launch.actions import DeclareLaunchArgument",
            "from launch.substitutions import LaunchConfiguration",
            "from launch_ros.actions import Node",
            "from ament_index_python.packages import get_package_share_directory",
            "",
            "def generate_launch_description():",
            "    return ld"
        ],
        "description": "Importe f√ºr ROS2-Launch-Dateien"
    },
    
    // üß± Deklariert ein einzelnes Launch-Argument
    "ROS2 Launch: Declare Argument": {
        "prefix": "ros_launch_arg",
        "body": [
        "DeclareLaunchArgument(",
        "    '${1:arg_name}',",
        "    default_value='${2:default}',",
        "    description='${3:Beschreibung}'",
        ")"
        ],
        "description": "Deklariert ein Launch-Argument"
    },
    
    
    // ‚öôÔ∏è Node mit Parametern
    "ROS2 Launch: Node mit Parametern": {
        "prefix": "ros_launch_node_param",
        "body": [
        "Node(",
        "    package='${1:mein_paket}',",
        "    executable='${2:mein_knoten}',",
        "    name='${3:knoten_name}',",
        "    parameters=[{",
        "        '${4:param_name}': ${5:Wert}",
        "    }],",
        "    output='screen'",
        ")"
        ],
        "description": "ROS2 Node mit Parametern"
    },   

    "Include Launch Description": {
        "prefix": "ros_launch_ld",
        "body": [
        "ld_${1:name} = IncludeLaunchDescription(",
        "    PythonLaunchDescriptionSource([",
        "        os.path.join(",
        "            get_package_share_directory(\"${2:package_name}\"),",
        "            \"launch\",",
        "            \"${3:launch_file}.launch.py\"",
        "        )",
        "    ])",
        ")"
        ],
        "description": "Include a launch description with placeholders for package and launch file"
    }
      
}
